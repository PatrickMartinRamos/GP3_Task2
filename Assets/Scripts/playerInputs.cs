//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/playerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInputs"",
    ""maps"": [
        {
            ""name"": ""movementInputs"",
            ""id"": ""eeee9fe0-ab2a-4e84-8167-d2231ea432d6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f4afccc9-bc63-4915-aa3e-c1c0cbf63046"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""ffc688cc-aeea-4828-815f-430f023d9bef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""45ca2c8f-c085-4a23-acd8-d3459287980d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ada6be37-cf6f-4161-a1d2-542eaede8687"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8cf06e54-aaac-4ce7-b26b-6e133b8afdf5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""05f0019b-1720-4c78-8bc0-42b9e37daf44"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd11f40c-268a-42e6-9dd4-35bbcde90425"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f385c799-3335-4a1d-9c68-df2a169f8353"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""8dfbe05a-9fd0-436d-9680-6e1771cd2729"",
            ""actions"": [
                {
                    ""name"": ""pickUp"",
                    ""type"": ""Button"",
                    ""id"": ""80e1bdb2-c169-485b-936e-60b952d26279"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""putDown"",
                    ""type"": ""Button"",
                    ""id"": ""caf77366-ea90-47c2-964b-83125fce24be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pull"",
                    ""type"": ""Button"",
                    ""id"": ""334000a7-aa0b-4941-9f7b-2c028281b84e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""push"",
                    ""type"": ""Button"",
                    ""id"": ""542d6fda-9a3d-40b4-9eb0-057e58f05098"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c41e11e0-d695-4b3a-9732-025c0d539a10"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f040d61-ba9f-4861-8a51-c55441ff0999"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""putDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c130586-add8-419e-9daa-bcd0c53e7be9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18537a1f-a86b-41e2-9e54-e1de3dc06749"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movementInputs
        m_movementInputs = asset.FindActionMap("movementInputs", throwIfNotFound: true);
        m_movementInputs_Move = m_movementInputs.FindAction("Move", throwIfNotFound: true);
        m_movementInputs_Look = m_movementInputs.FindAction("Look", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_pickUp = m_Interact.FindAction("pickUp", throwIfNotFound: true);
        m_Interact_putDown = m_Interact.FindAction("putDown", throwIfNotFound: true);
        m_Interact_pull = m_Interact.FindAction("pull", throwIfNotFound: true);
        m_Interact_push = m_Interact.FindAction("push", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movementInputs
    private readonly InputActionMap m_movementInputs;
    private List<IMovementInputsActions> m_MovementInputsActionsCallbackInterfaces = new List<IMovementInputsActions>();
    private readonly InputAction m_movementInputs_Move;
    private readonly InputAction m_movementInputs_Look;
    public struct MovementInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_movementInputs_Move;
        public InputAction @Look => m_Wrapper.m_movementInputs_Look;
        public InputActionMap Get() { return m_Wrapper.m_movementInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementInputsActions set) { return set.Get(); }
        public void AddCallbacks(IMovementInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementInputsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IMovementInputsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IMovementInputsActions instance)
        {
            if (m_Wrapper.m_MovementInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementInputsActions @movementInputs => new MovementInputsActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_pickUp;
    private readonly InputAction m_Interact_putDown;
    private readonly InputAction m_Interact_pull;
    private readonly InputAction m_Interact_push;
    public struct InteractActions
    {
        private @PlayerInputs m_Wrapper;
        public InteractActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @pickUp => m_Wrapper.m_Interact_pickUp;
        public InputAction @putDown => m_Wrapper.m_Interact_putDown;
        public InputAction @pull => m_Wrapper.m_Interact_pull;
        public InputAction @push => m_Wrapper.m_Interact_push;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @pickUp.started += instance.OnPickUp;
            @pickUp.performed += instance.OnPickUp;
            @pickUp.canceled += instance.OnPickUp;
            @putDown.started += instance.OnPutDown;
            @putDown.performed += instance.OnPutDown;
            @putDown.canceled += instance.OnPutDown;
            @pull.started += instance.OnPull;
            @pull.performed += instance.OnPull;
            @pull.canceled += instance.OnPull;
            @push.started += instance.OnPush;
            @push.performed += instance.OnPush;
            @push.canceled += instance.OnPush;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @pickUp.started -= instance.OnPickUp;
            @pickUp.performed -= instance.OnPickUp;
            @pickUp.canceled -= instance.OnPickUp;
            @putDown.started -= instance.OnPutDown;
            @putDown.performed -= instance.OnPutDown;
            @putDown.canceled -= instance.OnPutDown;
            @pull.started -= instance.OnPull;
            @pull.performed -= instance.OnPull;
            @pull.canceled -= instance.OnPull;
            @push.started -= instance.OnPush;
            @push.performed -= instance.OnPush;
            @push.canceled -= instance.OnPush;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    public interface IMovementInputsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnPickUp(InputAction.CallbackContext context);
        void OnPutDown(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
    }
}
